1. Hash table is a map data structure that contains key/value pairs. It uses a hash function to compute an index into an array of buckets, from which the desire value can be found.

2. Hashing is the process of converting abitrary data into a fixed-length hash code using a hashing function.

3. Hash table stores data by separating each object with uniqur ID.

4. Hash table is different from object by its ability to handle case in which a key corresponds with a native object attribute and provides constant time look up.

5.
A list of pets and their unique names : hash table
The name, age, and the birthday of your best friend: object
The name and location of every company in a given city: hash table
All of the books checked out from a library by a particular individual: hash table
The primary and secondary phone numbers for a contact: object

6. 

var hash = (string, max) => {
  var hash = 0;
  for (var i = 0; i < string.length; i++) {
    hash += string.charCodeAt(i);
  }
  return hash % max;
};

let HashTable = function() {

  let storage = [];
  const storageLimit = 14;
  
  this.print = function() {
    console.log(storage)
  }

  this.add = function(key, value) {
    var index = hash(key, storageLimit);
    console.log(index);
    if (storage[index]) {
      let found = storage[index].findIndex((item) => {
        return item === key;
      })
      if (found !== -1) {
        storage[index][found + 1] = value; 
      } else {
        storage[index].push(key, value)
      } 
    } else storage[index] = [key, value]
  };

  this.remove = function(key) {
    var index = hash(key, storageLimit);
    if (storage[index]) {
      let found = storage[index].findIndex((item) => {
        item === key
      })
      if (!found) {t
      } else delete storage[index][found, (found +1)] 
    }
  };

  this.lookup = function(key) {
    var index = hash(key, storageLimit);
    if (storage[index]) {
      let found = storage[index].findIndex((item) => {
        item === key
      })
      if (!found) {
        console.log('Not valid')
      } else {
        console.log(storage[index][found + 1])
      }
    } else console.log('Not valid.')
  };

};

let ht = new HashTable();
ht.add('91', {name: 'Tina', adress:'3201 Paul Dr'});
ht.add('94', {name: 'James', address:'3201 Paul Dr'});
ht.add('99', {name: 'Sunny', address:'3201 Paul Dr'});
ht.add('94', {name: 'Suzy', address:'3201 Paul Dr'});
console.log(ht.lookup('91'))
ht.print();


7. 
var hash = (str, max) => {
    var hash = 0;
    for (var i = 0; i < str.length; i++) {
        hash += str.charCodeAt(i)
    }
    return hash % max;
}

let HashTable  = function() {
    let inventory = [];
    const inventoryLimit = 90;

    this.print = () => {
        console.log(inventory);
    }

    this.add = (item, quantity) => {
        var index = hash(item, inventoryLimit);
        if (inventory[index] === undefined) {
            inventory[index] = [[item, quantity]]
        } else {
            var inserted = false;
            for (var i =0; i< inventory[index].length; i++) {
                if (inventory[index][i][0] === item) {
                    inventory[index][i][1] = quantity;
                    inserted = true;
                }
            }
            if (!inserted) {
                inventory[index].push([item, quantity]); 
            }
        }
    }

    this.delete = (item) => {
        var index = hash(item, inventoryLimit);
        if (inventory[index] === undefined) {
            return undefined;
        } else if (inventory[index].length === 1 && inventory[index][0][0] === item ) {
            delete inventory[index];
        } else {
            for (var i = 0; i < inventory[index].length; i++) {
                if (inventory[index][0][0] === item) {
                    delete inventory[index][i];
                }
            }
        }
    }

    this.search = function(item) {
    var index = hash(item, inventoryLimit);
    
    if(inventory[index] === undefined) {
      console.log("Not Found item");
    } else {
      for (var i = 0; i < inventory[index].length; i ++) {
        if (inventory[index][i][0] === item) {
          console.log(inventory[index][i][1]);
        }
      }
    }
}
}

var candy = new HashTable();
candy.add('sweet', 3)
console.log(candy.print())

8.
var hash = function (str, max) {
    var hash = 0;
    for (var i =0; i < str.length; i++) {
        hash += str.charCodeAt(i);
    }
    return hash % max;
}

class Newspaper {
    constructor() {
    this.storage = [];
    this.storageLimit = 40;
}
  
print() {
  console.log(this.storage)
}  

add(publisher, publicationDate, arr) {
    let key = publisher + publicationDate;
    let index = hash(key, this.storageLimit);
    console.log(index);
    let data = [publisher, publicationDate, arr];
    if (this.storage[index] === undefined) {
        this.storage[index] = (data);
    }
  
  
}

search(publisher, publicationDate) {
    let key = publisher + publicationDate;
    let index = hash(key, this.storageLimit);
    let result = [];
    console.log(this.storage[index][2]);
    if (!this.storage[index]) { 
        return 'No results were found.' 
    } else {
      return this.storage[index][2];
    }
  }
}

var abc = new Newspaper();
abc.add('times', '1995', ['Love']);

